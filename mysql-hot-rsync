#!/usr/bin/python

## mysql-hot-rsync : v0.2
##
## http://devsec.org/software/mysql-hot-rsync/
##
## - Thor J. Kooda
##
## CHANGELOG:
## 2006-04-19 : initial version
## 2016-02-05 : cleaned it up a bit, store optional credentials in ~/.my.cnf, proper per-table locking


## USAGE:  mysql-hot-rsync <dest dir> [db [table ...] ]

## ABOUT:
##  - uses rsync to save a SAFE (non-corrupted) backup of LIVE mysql databases and/or tables

## NOTES:
##  - if no db is specified, it will save all databases
##  - if no tables are specified, it will save all tables


import os
import sys
import ConfigParser
import MySQLdb
import glob
import subprocess


def debug( level, *objs ):
    try:
        if level <= int( os.getenv( "DEBUG" ) ):
            sys.stdout.flush()
            sys.stderr.flush()
            print >>sys.stderr, "DEBUG(%d):" % level, objs
            sys.stderr.flush()
    except:
        pass


def mysql_connect( username, password ):
    try:
        return MySQLdb.Connect( user = username ,
                                passwd = password )
    except:
        print >>sys.stderr, "ERROR: mysql connect"
        sys.exit( 1 )


def mysql_query( cursor, query ):
    try:
        cursor.execute( query )
    except:
        print >>sys.stderr, "ERROR: mysql query: '%s'" % query
        sys.exit( 1 )


def get_mysql_data_dir( con ):
    cursor = con.cursor()
    mysql_query( cursor, "SHOW VARIABLES LIKE 'datadir'" )
    datadir = cursor.fetchone()[1]
    cursor.close()
    return datadir


def get_dbs_and_tables( con, db, tables ):
    d = {}
    
    # user already specified db and tables..
    if tables:
        return { db: tables }
    
    cursor = con.cursor()
    
    if db:
        # user specified (one) db but no tables..
        d = { db: [] }
    else:
        # no dbs yet, find+store all dbs..
        mysql_query( cursor, "SHOW DATABASES" )
        for item in cursor.fetchall():
            debug( 5, "found db:", item )
            if item[0] not in [ "DATADIR.link", "lost+found" ]:
                d[ item[0] ] = []
    
    # store list of tables for each db..
    for db in d.keys():
        mysql_query( cursor, "SHOW TABLES FROM `%s`" % db )
        for table in cursor.fetchall():
            d[ db ].append( table[0] )
    
    cursor.close()
    
    return d # return a dict of dicts (each one having a single entry which is an array of tables)


# sync (slow) + flush + lock + sync (fast) table..
def lock_table( cursor, db, table ):
    subprocess.call( "sync" ) # force OS to flush any buffered changes to filesystem (so next `sync` call is faster when the lock is actually held)
    mysql_query( cursor, "USE `%s`" % db )
    mysql_query( cursor, "FLUSH TABLE `%s` WITH READ LOCK" % table ) # flush+lock one table (allows reading, prevents writing)
    subprocess.call( "sync" ) # force OS to flush any buffered changes to filesystem


def backup_table( path_dest_dir, data_dir, con, db, table ):
    path_db_dir = os.path.join( data_dir, db )
    errors = 0
    
    if not os.access( path_db_dir, os.R_OK ):
        print >>sys.stderr, "WARNING: skipping unreadable database dir:", path_db_dir
        return 1 # error
    
    path_files = glob.glob( os.path.join( path_db_dir, "%s.*" % table ) )
    if not path_files:
        print >>sys.stderr, "WARNING: non-existant table files for table: %s.%s" % ( db, table )
        return 1 # error
    
    ## "warm up" the backup file (run this rsync to get the destination table files for this table closer to the live ones before doing any actual locking as this first rsync can take some time; NOTE: this can make the backup file in an inconsistant state: which we fix by flushing + locking + syncing + rsyncing next)
    for path_file in path_files:
        if backup_table_file( path_dest_dir, data_dir, db, path_file ):
            print >>sys.stderr, "WARNING: rsync failed for warming up backup copy of: %s.%s" % ( db, table )
    
    cursor = con.cursor() # for lock
    lock_table( cursor, db, table )
    
    for path_file in path_files:
        debug( 7, "path_file:", path_file )
        if not os.access( path_file, os.R_OK ):
            print >>sys.stderr, "WARNING: skipping unreadable table file:", path_file
            errors += 1
            continue
        
        if backup_table_file( path_dest_dir, data_dir, db, path_file ): # do final rsync on each table file
            errors += 1
    
    mysql_query( cursor, "UNLOCK TABLES" ) # unlock all tables held by this session
    cursor.close() # for lock
    
    return errors


def backup_table_file( path_dest_dir, data_dir, db, path_file ):
    try:
        retcode = subprocess.call( [ "rsync",
                                     "--quiet", "--perms", "--owner",
                                     "--group", "--links", "--times",
                                     "--numeric-ids",
                                     path_file,
                                     os.path.join( path_dest_dir, db, "" )
                                     ] )
    except OSError, e:
        print >>sys.stderr, "ERROR: rsync failed:", e  # e.g. not in $PATH
        sys.exit( 1 )
    
    if retcode < 0:
        print >>sys.stderr, "ERROR: rsync was terminated by signal", -retcode
    elif retcode > 0:
        print >>sys.stderr, "ERROR: rsync comand returned:", retcode
    
    debug( 6, "rsync returned:", retcode )
    
    return retcode



##################################################
# main()

if len( sys.argv ) < 2:
    print >>sys.stderr, "usage: %s <dest dir> [db [tables ... ] ]" % os.path.basename( sys.argv[ 0 ] )
    sys.exit( 2 )

path_dest_dir = sys.argv[ 1 ]
if not os.access( path_dest_dir, os.W_OK ):
    print >>sys.stderr, "ERROR: non-writable destination dir:", path_dest_dir
    sys.exit( 1 )

arg_db = None
if len( sys.argv ) >= 3:
    arg_db = sys.argv[ 2 ]
debug( 8, "arg_db:", arg_db )

arg_tables = None
if len( sys.argv ) >= 4:
    arg_tables = sys.argv[ 3: ]
debug( 8, "arg_tables:", arg_tables )


config = ConfigParser.ConfigParser()
config.read( [ os.path.expanduser( "~/.my.cnf" ) ] ) # optional login credentials

username = None
password = None
try:
    username = config.get( "client", "user" )
except:
    pass
try:
    password = config.get( "client", "pass" )
except:
    pass
try:
    password = config.get( "client", "password" )
except:
    pass

debug( 9, "mysql username:", username )
debug( 9, "mysql password:", password )


con = mysql_connect( username, password )
data_dir = get_mysql_data_dir( con )


errors = 0
for db, tables in get_dbs_and_tables( con, arg_db, arg_tables ).iteritems():
    debug( 10, "pair:", db, tables )
    
    if not tables:
        print >>sys.stderr, "WARNING: skipping database with no tables:", db
        errors +=1
        continue
    
    if not os.access( os.path.join( data_dir, db ), os.R_OK ):
        print >>sys.stderr, "WARNING: skipping unreadable database:", db
        errors +=1
        continue
    
    for table in tables:
        if not backup_table( path_dest_dir, data_dir, con, db, table ):
            print >>sys.stderr, "syncd: %s.%s" % ( db, table )
        else:
            print >>sys.stderr, "FAILED: %s.%s" % ( db, table )
            errors += 1

debug( 4, "exit errors:", errors )
sys.exit( errors )

